generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "fullTextIndex", "filteredRelationCount", "interactiveTransactions", "orderByNulls"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum Role {
    ADMIN
    MANAGER
    GUEST
    CUSTOMER
}

enum Right {
    ORDER_READ
    ORDER_UPDATE
    PRODUCT_READ
    PRODUCT_UPDATE
    OFFER_READ
    OFFER_UPDATE
    COLLECTION_READ
    COLLECTION_UPDATE
    USER_READ
    USER_UPDATE
    SHIPPING_READ
    SHIPPING_UPDATE
    PAGE_READ
    PAGE_UPDATE
    MEDIA_UPLOAD
    MEDIA_DELETE
}

enum OfferStatus {
    NO_MATCH
    OFFERED
    ACCEPTED
    DECLINED
    ACTIVE
    SOLD
    RETURNING
    RETURN_APPROVAL
}

enum Currency {
    RUB
    USD
}

enum InvoiceType {
    PAYMENT
    REFUND
}

enum InvoiceMethod {
    CASH
    CASHLESS
}

enum OrderStatus {
    FULFILLED
    PARTIALLY_FULFILLED
    UNFULFILLED
    CANCELED
}

enum ReturnStatus {
    RETURN_REQUESTED
    RETURN_IN_PROGRESS
    PARTIALLY_RETURNED
    RETURNED
}

enum FulfillmentStatus {
    SENT
    DELIVERED
}

enum PaymentStatus {
    UNPAID
    PARTIALLY_PAID
    NEED_TO_RETURN
    REFUNDED
    PAID
}

enum InvoiceStatus {
    PENDING
    CANCELED
    SUCCEEDED
}

model Variable {
    id        Int      @id @default(autoincrement()) @db.UnsignedInt
    group     String
    key       String
    value     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([group, key])
    @@map("variable")
}

model VerificationCode {
    id        Int      @id @default(autoincrement()) @db.UnsignedInt
    email     String
    code      String
    createdAt DateTime @default(now())

    @@map("verificationcode")
}

model User {
    id                   Int               @id @default(autoincrement()) @db.UnsignedInt
    email                String?           @unique
    phone                String?
    firstName            String?
    lastName             String?
    fullName             String?
    inn                  String?
    account              String?
    correspondentAccount String?
    bic                  String?
    passport             String?
    comment              String?
    isVerified           Boolean           @default(false)
    isSubscribed         Boolean           @default(false)
    role                 Role              @default(GUEST)
    addresses            Address[]
    orders               Order[]
    favoriteProducts     FavoriteProduct[]
    tokens               Token[]
    cart                 CartProduct[]
    offers               Offer[]
    permissions          Permission[]
    timeline             Timeline[]
    createdAt            DateTime          @default(now())
    updatedAt            DateTime          @updatedAt

    @@fulltext([fullName])
    @@fulltext([fullName, email, phone])
    @@map("user")
}

model Permission {
    id        Int      @id @default(autoincrement()) @db.UnsignedInt
    right     Right
    user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId    Int      @db.UnsignedInt
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, right])
    @@map("permission")
}

model CartProduct {
    user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId    Int      @db.UnsignedInt
    offer     Offer    @relation(fields: [offerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    offerId   Int      @db.UnsignedInt
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([userId, offerId])
    @@map("cartproduct")
}

model Token {
    id           Int      @id @default(autoincrement()) @db.UnsignedInt
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId       Int      @db.UnsignedInt
    refreshToken String
    expiresIn    DateTime
    createdAt    DateTime @default(now())

    @@map("token")
}

model Address {
    id        Int      @id @default(autoincrement()) @db.UnsignedInt
    country   String
    city      String
    address   String
    region    String
    user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId    Int      @db.UnsignedInt
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("address")
}

model Order {
    id                 Int                 @db.UnsignedInt
    orderStatus        OrderStatus         @default(UNFULFILLED)
    paymentStatus      PaymentStatus       @default(UNPAID)
    returnStatus       ReturnStatus?
    subtotalPrice      Decimal             @db.Decimal(10, 2)
    totalDiscount      Decimal             @db.Decimal(10, 2)
    totalShippingPrice Decimal             @db.Decimal(10, 2)
    totalPrice         Decimal             @db.Decimal(10, 2)
    mailingCountry     String
    mailingCity        String
    mailingRegion      String
    mailingAddress     String
    shippingInfo       String?
    discountInfo       String?
    note               String?
    invoices           Invoice[]
    offers             Offer[]             @relation(name: "orderoffers")
    fulfillments       Fulfillment[]
    returns            Return[]
    timeline           Timeline[]
    removedOffers      OrderRemovedOffer[]
    user               User                @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId             Int                 @db.UnsignedInt
    deliveryProfile    DeliveryProfile     @relation(fields: [deliveryProfileId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    deliveryProfileId  Int                 @db.UnsignedInt
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt

    @@id([id, deliveryProfileId])
    @@map("order")
}

model Invoice {
    id                Int           @id @default(autoincrement()) @db.UnsignedInt
    type              InvoiceType   @default(PAYMENT)
    status            InvoiceStatus @default(PENDING)
    method            InvoiceMethod
    amount            Decimal       @db.Decimal(10, 2)
    currency          Currency      @default(RUB)
    order             Order         @relation(fields: [orderId, deliveryProfileId], references: [id, deliveryProfileId], onUpdate: Cascade, onDelete: Cascade)
    orderId           Int           @db.UnsignedInt
    deliveryProfileId Int           @db.UnsignedInt
    createdAt         DateTime      @default(now())
    updatedAt         DateTime      @updatedAt

    @@map("invoice")
}

model Timeline {
    id                Int      @id @default(autoincrement()) @db.UnsignedInt
    title             String   @db.VarChar(255)
    message           String?  @db.Text
    order             Order    @relation(fields: [orderId, deliveryProfileId], references: [id, deliveryProfileId], onUpdate: Cascade, onDelete: Cascade)
    orderId           Int      @db.UnsignedInt
    deliveryProfileId Int      @db.UnsignedInt
    user              User?    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: SetNull)
    userId            Int?     @db.UnsignedInt
    createdAt         DateTime @default(now())

    @@map("timeline")
}

model Fulfillment {
    id                Int               @id @default(autoincrement()) @db.UnsignedInt
    status            FulfillmentStatus @default(SENT)
    tracking          String?
    carrier           String?
    offers            Offer[]
    order             Order             @relation(fields: [orderId, deliveryProfileId], references: [id, deliveryProfileId], onUpdate: Cascade, onDelete: Cascade)
    orderId           Int               @db.UnsignedInt
    deliveryProfileId Int               @db.UnsignedInt
    createdAt         DateTime          @default(now())
    updatedAt         DateTime          @updatedAt

    @@map("fulfillment")
}

model Return {
    id                Int           @id @default(autoincrement()) @db.UnsignedInt
    status            ReturnStatus  @default(RETURN_REQUESTED)
    tracking          String?
    carrier           String?
    offers            ReturnOffer[]
    order             Order         @relation(fields: [orderId, deliveryProfileId], references: [id, deliveryProfileId], onUpdate: Cascade, onDelete: Cascade)
    orderId           Int           @db.UnsignedInt
    deliveryProfileId Int           @db.UnsignedInt
    createdAt         DateTime      @default(now())
    updatedAt         DateTime      @updatedAt

    @@map("return")
}

model ReturnOffer {
    return    Return   @relation(fields: [returnId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    returnId  Int      @db.UnsignedInt
    offer     Offer    @relation(fields: [offerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    offerId   Int      @db.UnsignedInt
    reason    String
    createdAt DateTime @default(now())

    @@id([returnId, offerId])
    @@map("returnoffer")
}

model OrderRemovedOffer {
    order                  Order    @relation(fields: [orderId, orderDeliveryProfileId], references: [id, deliveryProfileId], onUpdate: Cascade, onDelete: Cascade)
    orderId                Int      @db.UnsignedInt
    orderDeliveryProfileId Int      @db.UnsignedInt
    offer                  Offer    @relation(fields: [offerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    offerId                Int      @db.UnsignedInt
    createdAt              DateTime @default(now())

    @@id([orderId, orderDeliveryProfileId, offerId])
    @@map("orderremovedoffer")
}

model Offer {
    id                Int                 @id @default(autoincrement()) @db.UnsignedInt
    productTitle      String              @db.VarChar(255)
    variantTitle      String
    price             Decimal             @db.Decimal(10, 2)
    offerPrice        Decimal             @db.Decimal(10, 2)
    compareAtPrice    Decimal?            @db.Decimal(10, 2)
    comment           String?
    status            OfferStatus         @default(OFFERED)
    user              User                @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId            Int                 @db.UnsignedInt
    order             Order?              @relation(name: "orderoffers", fields: [orderId, deliveryProfileId], references: [id, deliveryProfileId], onUpdate: Cascade, onDelete: SetNull)
    orderId           Int?                @db.UnsignedInt
    product           Product?            @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: SetNull)
    productId         Int?                @db.UnsignedInt
    variant           Variant?            @relation(fields: [variantId], references: [id], onUpdate: Cascade, onDelete: SetNull)
    variantId         Int?                @db.UnsignedInt
    deliveryProfile   DeliveryProfile?    @relation(fields: [deliveryProfileId], references: [id], onUpdate: Cascade, onDelete: SetNull)
    deliveryProfileId Int?                @db.UnsignedInt
    fulfillment       Fulfillment?        @relation(fields: [fulfillmentId], references: [id], onUpdate: Cascade, onDelete: SetNull)
    fulfillmentId     Int?                @db.UnsignedInt
    cartProduct       CartProduct[]
    returned          ReturnOffer[]
    removedFromOrders OrderRemovedOffer[]
    createdAt         DateTime            @default(now())
    updatedAt         DateTime            @updatedAt

    @@fulltext([productTitle])
    @@map("offer")
}

model FavoriteProduct {
    product   Product  @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    productId Int      @db.UnsignedInt
    user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId    Int      @db.UnsignedInt
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([productId, userId])
    @@map("favoriteproduct")
}

model Collection {
    id              Int       @id @default(autoincrement()) @db.UnsignedInt
    title           String    @db.VarChar(255)
    description     String?   @db.Text
    metaTitle       String?   @db.VarChar(255)
    metaDescription String?   @db.Text
    hidden          Boolean   @default(false)
    handle          String    @unique() @db.VarChar(255)
    products        Product[] @relation(name: "collectiontoproduct")
    images          Image[]
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt

    @@fulltext([title])
    @@map("collection")
}

model Page {
    id              Int      @id @default(autoincrement()) @db.UnsignedInt
    title           String   @db.VarChar(255)
    content         String   @db.Text
    metaTitle       String?  @db.VarChar(255)
    metaDescription String?  @db.Text
    handle          String   @unique() @db.VarChar(255)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    @@fulltext([title])
    @@map("page")
}

model Product {
    id               Int               @id @default(autoincrement()) @db.UnsignedInt
    handle           String            @unique() @db.VarChar(255)
    title            String            @db.VarChar(255)
    available        Boolean           @default(false)
    metaTitle        String            @db.VarChar(255)
    metaDescription  String            @db.Text
    minPrice         Decimal?          @db.Decimal(10, 2)
    maxPrice         Decimal?          @db.Decimal(10, 2)
    sku              String?
    barcode          String?
    vendor           String?
    type             String?
    description      String?           @db.Text
    images           Image[]
    collections      Collection[]      @relation(name: "collectiontoproduct")
    variants         Variant[]
    productIsFavored FavoriteProduct[]
    features         Feature[]
    offers           Offer[]
    metafields       Metafield[]
    tags             Tag[]
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt

    @@fulltext([title])
    @@fulltext([vendor])
    @@fulltext([type])
    @@fulltext([title, vendor])
    @@map("product")
}

model Tag {
    id        Int      @id @default(autoincrement()) @db.UnsignedInt
    title     String
    product   Product  @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    productId Int      @db.UnsignedInt
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@fulltext([title])
    @@map("tag")
}

model Metafield {
    id        Int      @id @default(autoincrement()) @db.UnsignedInt
    key       String
    value     String
    product   Product  @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    productId Int      @db.UnsignedInt
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())

    @@unique([productId, key])
    @@map("metafield")
}

model Feature {
    id        Int            @id @default(autoincrement()) @db.UnsignedInt
    title     String
    position  Int
    values    FeatureValue[]
    product   Product        @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    productId Int            @db.UnsignedInt
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt

    @@unique([productId, title])
    @@map("feature")
}

model FeatureValue {
    id        Int      @id @default(autoincrement()) @db.UnsignedInt
    key       String
    value     String
    position  Int
    feature   Feature  @relation(fields: [featureId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    featureId Int      @db.UnsignedInt
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([featureId, key])
    @@map("featurevalue")
}

model Image {
    id           Int         @id @default(autoincrement()) @db.UnsignedInt
    path         String
    src          String
    alt          String
    blurhash     String
    position     Int
    product      Product?    @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: SetNull)
    productId    Int?        @db.UnsignedInt
    collection   Collection? @relation(fields: [collectionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    collectionId Int?        @db.UnsignedInt
    variant      Variant?    @relation(fields: [variantId], references: [id], onUpdate: Cascade, onDelete: SetNull)
    variantId    Int?        @db.UnsignedInt
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt

    @@map("image")
}

model Variant {
    id        Int      @id @default(autoincrement()) @db.UnsignedInt
    sku       String?
    barcode   String?
    option0   String?
    option1   String?
    option2   String?
    product   Product  @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    productId Int      @db.UnsignedInt
    images    Image[]
    offers    Offer[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("variant")
}

model DeliveryProfile {
    id        Int            @id @default(autoincrement()) @db.UnsignedInt
    isDefault Boolean        @default(false)
    title     String         @unique
    location  String
    orders    Order[]
    offers    Offer[]
    zones     DeliveryZone[]
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt

    @@map("deliveryprofile")
}

model DeliveryZone {
    id                Int              @id @default(autoincrement()) @db.UnsignedInt
    country           String
    region            String
    options           DeliveryOption[]
    deliveryProfile   DeliveryProfile  @relation(fields: [deliveryProfileId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    deliveryProfileId Int              @db.UnsignedInt
    createdAt         DateTime         @default(now())
    updatedAt         DateTime         @updatedAt

    @@unique([deliveryProfileId, country, region])
    @@fulltext([country, region])
    @@map("deliveryzone")
}

model DeliveryOption {
    id             Int          @id @default(autoincrement()) @db.UnsignedInt
    title          String
    duration       Int
    price          Decimal      @db.Decimal(10, 2)
    deliveryZone   DeliveryZone @relation(fields: [deliveryZoneId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    deliveryZoneId Int          @db.UnsignedInt
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt

    @@map("deliveryoption")
}

model Country {
    id        Int      @id @default(autoincrement()) @db.UnsignedInt
    title     String   @unique
    regions   Region[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@fulltext([title])
    @@map("country")
}

model Region {
    id        Int      @id @default(autoincrement()) @db.UnsignedInt
    title     String
    cities    City[]
    country   Country  @relation(fields: [countryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    countryId Int      @db.UnsignedInt
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([countryId, title])
    @@fulltext([title])
    @@map("region")
}

model City {
    id        Int      @id @default(autoincrement()) @db.UnsignedInt
    title     String
    region    Region   @relation(fields: [regionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    regionId  Int      @db.UnsignedInt
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([regionId, title])
    @@fulltext([title])
    @@map("city")
}
